{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Wybthon","text":"<p>Wybthon is a client-side Python SPA framework that runs in the browser via Pyodide.</p>"},{"location":"#what-is-wybthon","title":"What is Wybthon?","text":"<p>Build interactive web apps in Python that execute entirely in the browser. Wybthon provides a Virtual DOM renderer, reactive primitives, routing, forms, and DOM/event interop, all designed for Pyodide.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Virtual DOM renderer with function and class components</li> <li>Reactive primitives: <code>signal</code>, <code>computed</code>, <code>effect</code>, <code>batch</code>, and <code>use_resource</code></li> <li>Router with path params, query parsing, and a <code>Link</code> component</li> <li>Contexts and a <code>Provider</code> component</li> <li>DOM helpers and event delegation</li> <li>Forms state, validators, and bindings</li> <li>Dev server with hot-reload (SSE)</li> </ul>"},{"location":"#quickstart","title":"Quickstart","text":"<p>1) Clone the repo and run the demo:</p> <pre><code>python -m http.server\n# open http://localhost:8000/examples/demo/index.html\n</code></pre> <p>2) Or run the dev server with auto-reload:</p> <pre><code>pip install .\nwyb dev --dir .\n</code></pre> <p>3) Explore the demo app in <code>examples/demo</code> and the API in the Concepts and API sections.</p>"},{"location":"#documentation-map","title":"Documentation map","text":"<ul> <li>Getting Started: install, run the demo, dev server</li> <li>Concepts: deep dives into VDOM, components, reactivity, router, context, events, forms, DOM, error boundaries</li> <li>Guides: dev server, demo app, Pyodide integration, deployment, testing, performance, typing</li> <li>Examples: walkthroughs for the demo\u2019s pages and patterns</li> <li>API Reference: auto-generated docs per module via mkdocstrings</li> </ul> <p>TODO: Add a small end-to-end example on the homepage once the component authoring guide is finalized. TODO: Add a screenshot of the demo app landing page.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#wybthon.Component","title":"<code>Component</code>","text":"<p>Class component base for the VDOM renderer.</p> <p>Subclasses should implement <code>render(self) -&gt; VNode</code>. Lifecycle hooks:   - on_mount(self)   - on_update(self, prev_props: dict)   - on_unmount(self)</p>"},{"location":"api/#wybthon.Component.on_mount","title":"<code>on_mount()</code>","text":"<p>Called after the component is first mounted.</p>"},{"location":"api/#wybthon.Component.on_unmount","title":"<code>on_unmount()</code>","text":"<p>Called before the component is removed from the DOM.</p>"},{"location":"api/#wybthon.Component.on_update","title":"<code>on_update(prev_props)</code>","text":"<p>Called after props update and render diff applied.</p>"},{"location":"api/#wybthon.ErrorBoundary","title":"<code>ErrorBoundary</code>","text":"<p>               Bases: <code>Component</code></p> <p>Component that catches errors in its subtree and renders a fallback.</p>"},{"location":"api/#wybthon.Provider","title":"<code>Provider</code>","text":"<p>               Bases: <code>Component if Component is not None else object</code></p> <p>Context provider component.</p> Props <ul> <li>context: Context</li> <li>value: Any</li> <li>children: VNode or list of VNodes</li> </ul>"},{"location":"api/#wybthon.use_resource","title":"<code>use_resource(fetcher)</code>","text":"<p>Create an async Resource with loading/error states and cancellation.</p> <p>The provided <code>fetcher</code> should be an async function returning the data value. If it accepts a <code>signal</code> keyword argument, an AbortSignal will be passed for cancellation support when available.</p>"},{"location":"examples/","title":"Examples","text":"<p>Walk through focused examples mirroring the demo app pages.</p> <ul> <li>Counter: <code>examples/counter.md</code></li> <li>Async Fetch: <code>examples/fetch.md</code></li> <li>Forms: <code>examples/forms.md</code></li> <li>Error Boundary: <code>examples/errors.md</code></li> <li>Router: <code>examples/router.md</code></li> </ul> <p>Tip: Run <code>python -m http.server</code> and open the demo at <code>/examples/demo/index.html</code> to see these in action.</p> <p>TODO: Add links/screenshots once example pages include embedded snippets.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Follow these steps to run the demo and start hacking on Wybthon.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9+</li> <li>A modern browser</li> </ul>"},{"location":"getting-started/#run-the-demo-no-install","title":"Run the demo (no install)","text":"<pre><code>python -m http.server\n# Then open http://localhost:8000/examples/demo/index.html\n</code></pre> <p>The demo loads Pyodide, mounts the library from <code>src/wybthon/</code>, then runs the app under <code>examples/demo/app/</code>.</p>"},{"location":"getting-started/#dev-server-with-auto-reload","title":"Dev server with auto-reload","text":"<p>Install the package locally (for the <code>wyb</code> CLI), then start the dev server:</p> <pre><code>pip install .\nwyb dev --dir .\n</code></pre> <p>Flags:</p> <ul> <li><code>--host</code> (default <code>127.0.0.1</code>)</li> <li><code>--port</code> (default <code>8000</code>, auto-increments on conflict)</li> <li><code>--watch</code> (defaults to <code>src</code> and <code>examples</code>)</li> </ul> <p>The dev server exposes an SSE endpoint (<code>/__sse</code>) that the demo listens to for reload events.</p>"},{"location":"getting-started/#install-from-pypi-experimental","title":"Install from PyPI (experimental)","text":"<pre><code>pip install wybthon\n</code></pre> <p>In Pyodide via <code>micropip</code>:</p> <pre><code>import micropip\nawait micropip.install(\"wybthon\")\n</code></pre> <p>TODO: Provide a minimal component example here once the authoring flow is finalized (function vs class components, recommended structure).</p>"},{"location":"api/component/","title":"component","text":""},{"location":"api/component/#wybthoncomponent","title":"wybthon.component","text":""},{"location":"api/component/#wybthon.component.Component","title":"<code>Component</code>","text":"<p>Class component base for the VDOM renderer.</p> <p>Subclasses should implement <code>render(self) -&gt; VNode</code>. Lifecycle hooks:   - on_mount(self)   - on_update(self, prev_props: dict)   - on_unmount(self)</p>"},{"location":"api/component/#wybthon.component.Component.on_mount","title":"<code>on_mount()</code>","text":"<p>Called after the component is first mounted.</p>"},{"location":"api/component/#wybthon.component.Component.on_unmount","title":"<code>on_unmount()</code>","text":"<p>Called before the component is removed from the DOM.</p>"},{"location":"api/component/#wybthon.component.Component.on_update","title":"<code>on_update(prev_props)</code>","text":"<p>Called after props update and render diff applied.</p>"},{"location":"api/context/","title":"context","text":""},{"location":"api/context/#wybthoncontext","title":"wybthon.context","text":""},{"location":"api/context/#wybthon.context.Provider","title":"<code>Provider</code>","text":"<p>               Bases: <code>Component if Component is not None else object</code></p> <p>Context provider component.</p> Props <ul> <li>context: Context</li> <li>value: Any</li> <li>children: VNode or list of VNodes</li> </ul>"},{"location":"api/dom/","title":"dom","text":""},{"location":"api/dom/#wybthondom","title":"wybthon.dom","text":""},{"location":"api/events/","title":"events","text":""},{"location":"api/events/#wybthonevents","title":"wybthon.events","text":""},{"location":"api/forms/","title":"forms","text":""},{"location":"api/forms/#wybthonforms","title":"wybthon.forms","text":""},{"location":"api/reactivity/","title":"reactivity","text":""},{"location":"api/reactivity/#wybthonreactivity","title":"wybthon.reactivity","text":""},{"location":"api/reactivity/#wybthon.reactivity.Resource","title":"<code>Resource</code>","text":"<p>               Bases: <code>Generic[R]</code></p> <p>Async resource wrapper with Signals for data, error, and loading.</p> <p>Use <code>reload()</code> to (re)fetch, <code>cancel()</code> to cancel the in-flight request.</p>"},{"location":"api/reactivity/#wybthon.reactivity.use_resource","title":"<code>use_resource(fetcher)</code>","text":"<p>Create an async Resource with loading/error states and cancellation.</p> <p>The provided <code>fetcher</code> should be an async function returning the data value. If it accepts a <code>signal</code> keyword argument, an AbortSignal will be passed for cancellation support when available.</p>"},{"location":"api/router/","title":"router","text":""},{"location":"api/router/#wybthonrouter","title":"wybthon.router","text":""},{"location":"api/vdom/","title":"vdom","text":""},{"location":"api/vdom/#wybthonvdom","title":"wybthon.vdom","text":""},{"location":"api/vdom/#wybthon.vdom.ErrorBoundary","title":"<code>ErrorBoundary</code>","text":"<p>               Bases: <code>Component</code></p> <p>Component that catches errors in its subtree and renders a fallback.</p>"},{"location":"api/wybthon/","title":"Package","text":""},{"location":"api/wybthon/#wybthon-package","title":"wybthon (package)","text":""},{"location":"api/wybthon/#wybthon.Component","title":"<code>Component</code>","text":"<p>Class component base for the VDOM renderer.</p> <p>Subclasses should implement <code>render(self) -&gt; VNode</code>. Lifecycle hooks:   - on_mount(self)   - on_update(self, prev_props: dict)   - on_unmount(self)</p>"},{"location":"api/wybthon/#wybthon.Component.on_mount","title":"<code>on_mount()</code>","text":"<p>Called after the component is first mounted.</p>"},{"location":"api/wybthon/#wybthon.Component.on_unmount","title":"<code>on_unmount()</code>","text":"<p>Called before the component is removed from the DOM.</p>"},{"location":"api/wybthon/#wybthon.Component.on_update","title":"<code>on_update(prev_props)</code>","text":"<p>Called after props update and render diff applied.</p>"},{"location":"api/wybthon/#wybthon.ErrorBoundary","title":"<code>ErrorBoundary</code>","text":"<p>               Bases: <code>Component</code></p> <p>Component that catches errors in its subtree and renders a fallback.</p>"},{"location":"api/wybthon/#wybthon.Provider","title":"<code>Provider</code>","text":"<p>               Bases: <code>Component if Component is not None else object</code></p> <p>Context provider component.</p> Props <ul> <li>context: Context</li> <li>value: Any</li> <li>children: VNode or list of VNodes</li> </ul>"},{"location":"api/wybthon/#wybthon.use_resource","title":"<code>use_resource(fetcher)</code>","text":"<p>Create an async Resource with loading/error states and cancellation.</p> <p>The provided <code>fetcher</code> should be an async function returning the data value. If it accepts a <code>signal</code> keyword argument, an AbortSignal will be passed for cancellation support when available.</p>"},{"location":"concepts/components/","title":"Components","text":""},{"location":"concepts/components/#components","title":"Components","text":"<p>Wybthon supports both function and class components.</p>"},{"location":"concepts/components/#function-components","title":"Function components","text":"<pre><code>from wybthon import h\n\ndef Hello(props):\n    name = props.get(\"name\", \"world\")\n    return h(\"div\", {}, f\"Hello {name}\")\n</code></pre>"},{"location":"concepts/components/#class-components","title":"Class components","text":"<pre><code>from wybthon import Component, h\n\nclass Counter(Component):\n    def render(self):\n        return h(\"div\", {}, \"TODO: counter example here\")\n</code></pre> <p>Lifecycle hooks for class components: <code>on_mount</code>, <code>on_update(prev_props)</code>, <code>on_unmount</code>.</p> <p>TODO: Add guidance on state ownership, passing children, and composition patterns.</p>"},{"location":"concepts/context/","title":"Context","text":""},{"location":"concepts/context/#context","title":"Context","text":"<p>Provide and consume values across the tree.</p> <pre><code>from wybthon import h\nfrom wybthon.context import create_context, Provider, use_context\n\nTheme = create_context(\"light\")\n\ndef Label(props):\n    theme = use_context(Theme)\n    return h(\"span\", {}, f\"Theme: {theme}\")\n\nview = h(Provider, {\"context\": Theme, \"value\": \"dark\", \"children\": [h(Label, {})]})\n</code></pre> <p>TODO: Document provider scoping and performance notes.</p>"},{"location":"concepts/dom/","title":"DOM Interop","text":""},{"location":"concepts/dom/#dom-interop","title":"DOM Interop","text":"<p><code>Element</code> is a thin wrapper around DOM nodes with helpers for attributes, classes, events, and querying.</p> <pre><code>from wybthon.dom import Element\n\nroot = Element(\"#app\", existing=True)\ndiv = Element(\"div\")\ndiv.set_text(\"Hello\")\ndiv.append_to(root)\n</code></pre> <p>TODO: Explain refs and how VDOM uses <code>Element</code> under the hood.</p>"},{"location":"concepts/error-boundaries/","title":"Error Boundaries","text":""},{"location":"concepts/error-boundaries/#error-boundaries","title":"Error Boundaries","text":"<p><code>ErrorBoundary</code> catches errors thrown during render of its subtree and renders a fallback.</p> <pre><code>from wybthon.vdom import ErrorBoundary\nfrom wybthon import h\n\ndef fallback(err):\n    return h(\"div\", {\"class\": \"error\"}, f\"Oops: {err}\")\n\nview = h(ErrorBoundary, {\"fallback\": fallback, \"children\": [\"TODO: child\"]})\n</code></pre> <p>TODO: Document reset behavior and limitations.</p>"},{"location":"concepts/events/","title":"Events","text":""},{"location":"concepts/events/#events","title":"Events","text":"<p>Event handlers are delegated at the document root.</p> <pre><code>from wybthon import h\n\ndef Button(props):\n    return h(\"button\", {\"on_click\": lambda evt: print(\"clicked\")}, \"Click\")\n</code></pre> <p>Supported prop names: <code>on_click</code>, <code>on_input</code>, <code>on_change</code>, etc. Both <code>on_foo</code> and <code>onFoo</code> styles are supported; they normalize to DOM event names.</p> <p>TODO: Document <code>DomEvent</code> shape and <code>prevent_default</code>/<code>stop_propagation</code>.</p>"},{"location":"concepts/forms/","title":"Forms","text":""},{"location":"concepts/forms/#forms","title":"Forms","text":"<p>Form state helpers and validators.</p> <pre><code>from wybthon.forms import form_state, bind_text, required, min_length\nfrom wybthon import h\n\nfields = form_state({\"email\": \"\", \"agree\": False})\n\ndef View(props):\n    email = fields[\"email\"]\n    return h(\"form\", {\"on_submit\": lambda e: print(\"submit\")},\n             h(\"input\", {**bind_text(email, validators=[required(), min_length(3)])}),\n             h(\"div\", {}, email.error.get() or \"\"))\n</code></pre> <p>TODO: Add checkbox/select bindings and <code>on_submit</code> example with validation.</p>"},{"location":"concepts/reactivity/","title":"Reactivity","text":""},{"location":"concepts/reactivity/#reactivity","title":"Reactivity","text":"<p>Signals drive the render pipeline.</p> <pre><code>from wybthon import signal, computed, effect, batch\n\ncount = signal(0)\ndouble = computed(lambda: count.get() * 2)\n\ndef log():\n    print(\"double:\", double.get())\n\neff = effect(log)\ncount.set(1)\n</code></pre> <ul> <li><code>signal(value)</code> \u2192 get/set</li> <li><code>computed(fn)</code> \u2192 derived; dispose when not needed</li> <li><code>effect(fn)</code> \u2192 runs and re-runs on dependencies</li> <li><code>batch()</code> \u2192 batch updates and schedule once</li> <li><code>use_resource(fetcher)</code> \u2192 async data with loading/error signals</li> </ul> <p>TODO: Explain microtask scheduling in Pyodide and fallbacks; cancellation semantics for <code>use_resource</code>.</p>"},{"location":"concepts/router/","title":"Router","text":""},{"location":"concepts/router/#router","title":"Router","text":"<p>Client-side routing with path params and query parsing.</p> <pre><code>from wybthon import h\nfrom wybthon.router import Router, Route, Link\n\ndef Home(props):\n    return h(\"div\", {}, \"Home\")\n\nroutes = [\n    Route(path=\"/\", component=Home),\n]\n\napp = h(Router, {\"routes\": routes})\n</code></pre> <ul> <li><code>navigate(path, replace=False)</code> updates history and <code>current_path</code></li> <li><code>Link</code> intercepts clicks for SPA navigation</li> </ul> <p>TODO: Document nested routes and wildcard matching.</p>"},{"location":"concepts/vdom/","title":"Virtual DOM","text":""},{"location":"concepts/vdom/#virtual-dom","title":"Virtual DOM","text":"<p>The VDOM is represented by <code>VNode</code> and created via <code>h(tag, props, *children)</code>.</p> <ul> <li><code>tag</code>: string (DOM node) or callable (component)</li> <li><code>props</code>: attributes, event handlers, and special props like <code>key</code></li> <li><code>children</code>: strings or <code>VNode</code>s</li> </ul> <pre><code>from wybthon import h\n\nview = h(\"div\", {\"class\": \"app\"},\n          h(\"h1\", {}, \"Hello\"),\n          h(\"p\", {}, \"Welcome\"))\n</code></pre> <p>Rendering is done with <code>vdom.render(view, container)</code>.</p> <p>TODO: Document keyed diffing, normalization rules, and error boundaries interaction.</p>"},{"location":"examples/counter/","title":"Counter","text":""},{"location":"examples/counter/#counter","title":"Counter","text":"<p>Demonstrates state updates with <code>signal</code> inside a class component.</p> <pre><code>from wybthon import Component, h, signal\n\nclass Counter(Component):\n    def __init__(self, props):\n        super().__init__(props)\n        self.count = signal(0)\n\n    def render(self):\n        return h(\"div\", {},\n                 h(\"p\", {}, f\"Count: {self.count.get()}\"),\n                 h(\"button\", {\"on_click\": lambda e: self.count.set(self.count.get() + 1)}, \"Increment\"))\n</code></pre> <p>TODO: Add function component variant and tests.</p>"},{"location":"examples/errors/","title":"Error Boundary","text":""},{"location":"examples/errors/#error-boundary","title":"Error Boundary","text":"<p>Catch render errors and show a fallback.</p> <pre><code>from wybthon.vdom import ErrorBoundary\nfrom wybthon import h\n\ndef Boom(props):\n    raise RuntimeError(\"boom\")\n\ndef fb(err):\n    return h(\"div\", {}, f\"Oops: {err}\")\n\nview = h(ErrorBoundary, {\"fallback\": fb, \"children\": [h(Boom, {})]})\n</code></pre> <p>TODO: Show boundary reset and nested boundaries.</p>"},{"location":"examples/fetch/","title":"Async Fetch","text":""},{"location":"examples/fetch/#async-fetch","title":"Async Fetch","text":"<p>Fetch data with <code>use_resource</code>.</p> <pre><code>from wybthon.reactivity import use_resource\nfrom wybthon import h\n\nasync def load_data():\n    # TODO: sample fetch using js.fetch\n    return {\"message\": \"hello\"}\n\nres = use_resource(load_data)\n\ndef View(props):\n    if res.loading.get():\n        return h(\"div\", {}, \"Loading...\")\n    if res.error.get():\n        return h(\"div\", {}, f\"Error: {res.error.get()}\")\n    return h(\"pre\", {}, str(res.data.get()))\n</code></pre> <p>TODO: Add AbortSignal usage and retry UI.</p>"},{"location":"examples/forms/","title":"Forms","text":""},{"location":"examples/forms/#forms","title":"Forms","text":"<p>Bindings and validation.</p> <pre><code>from wybthon.forms import form_state, bind_text, required\nfrom wybthon import h\n\nfields = form_state({\"email\": \"\"})\n\ndef View(props):\n    email = fields[\"email\"]\n    return h(\"form\", {\"on_submit\": lambda e: print(\"submit\")},\n             h(\"input\", {**bind_text(email, validators=[required()])}),\n             h(\"div\", {}, email.error.get() or \"\"))\n</code></pre> <p>TODO: Add checkbox/select and a full submit handler.</p>"},{"location":"examples/router/","title":"Router","text":""},{"location":"examples/router/#router","title":"Router","text":"<p>Basic routing with <code>Router</code> and <code>Link</code>.</p> <pre><code>from wybthon.router import Router, Route, Link\nfrom wybthon import h\n\ndef Home(props):\n    return h(\"div\", {}, \"Home\", h(\"div\", {}, h(Link, {\"to\": \"/about\", \"children\": [\"About\"]})))\n\ndef About(props):\n    return h(\"div\", {}, \"About\")\n\nroutes = [\n    Route(path=\"/\", component=Home),\n    Route(path=\"/about\", component=About),\n]\n\napp = h(Router, {\"routes\": routes})\n</code></pre> <p>TODO: Add dynamic params and query parsing example.</p>"},{"location":"guides/demo-app/","title":"Demo App","text":""},{"location":"guides/demo-app/#demo-app","title":"Demo App","text":"<p>The demo is served from <code>examples/demo/</code>.</p> <ul> <li><code>index.html</code> loads <code>bootstrap.js</code></li> <li><code>bootstrap.js</code> loads Pyodide, mounts the library from <code>src/wybthon/</code>, and copies demo files under <code>/app</code> inside Pyodide FS, then calls <code>app.main.main()</code></li> </ul> <p>Folders under <code>examples/demo/app/</code> mirror routes and components.</p> <p>TODO: Describe each demo page and how routing is wired in <code>app/routes.py</code>.</p>"},{"location":"guides/deployment/","title":"Deployment","text":""},{"location":"guides/deployment/#deployment","title":"Deployment","text":"<p>Since Wybthon apps run fully client-side, deployment is static hosting.</p> <p>Checklist:</p> <ul> <li>Serve the HTML/JS bundle (Pyodide + your app assets)</li> <li>Set correct <code>Cross-Origin-Opener-Policy</code>/<code>Cross-Origin-Embedder-Policy</code> if using features that require them</li> <li>Use a CDN for Pyodide or host locally</li> </ul> <p>TODO: Provide example configurations for GitHub Pages, Netlify, and Vercel.</p>"},{"location":"guides/dev-server/","title":"Dev Server","text":""},{"location":"guides/dev-server/#dev-server","title":"Dev Server","text":"<p>Run a static server with auto-reload over SSE.</p> <pre><code>pip install .\nwyb dev --dir . --host 127.0.0.1 --port 8000 --watch src examples\n</code></pre> <p>Behavior:</p> <ul> <li>Watches <code>--watch</code> directories for file mtime changes</li> <li>Notifies browser via <code>/__sse</code> events; demo subscribes and reloads the page</li> <li>Binds to the requested port or the next available up to +20</li> </ul> <p>TODO: Document using a custom handler or mounting additional static paths.</p>"},{"location":"guides/performance/","title":"Performance","text":""},{"location":"guides/performance/#performance","title":"Performance","text":"<p>Tips:</p> <ul> <li>Prefer signals at the edges; derive with <code>computed</code> to minimize re-renders</li> <li>Use <code>key</code> on lists to help the diffing algorithm</li> <li>Batch updates with <code>batch()</code></li> </ul> <p>TODO: Add profiling notes and patterns for large lists.</p>"},{"location":"guides/pyodide/","title":"Pyodide","text":""},{"location":"guides/pyodide/#pyodide","title":"Pyodide","text":"<p>Wybthon runs in the browser via Pyodide.</p> <p>Key points:</p> <ul> <li>Use <code>micropip</code> to install packages when needed</li> <li>Import from <code>wybthon</code> after loading the library files into Pyodide FS (the demo does this for you)</li> <li>Interop with JS via <code>js</code> and <code>pyodide.ffi</code></li> </ul> <pre><code>import micropip\nawait micropip.install(\"wybthon\")\nimport wybthon\n</code></pre> <p>TODO: Add guidance on threading/event loops and async APIs in Pyodide.</p>"},{"location":"guides/testing/","title":"Testing","text":""},{"location":"guides/testing/#testing","title":"Testing","text":"<p>Approaches:</p> <ul> <li>Unit test pure modules (e.g., <code>reactivity</code>) in CPython</li> <li>For browser-dependent code, use Pyodide in a headless browser or test via demo pages</li> </ul> <p>TODO: Provide an example pytest for <code>signal</code>/<code>computed</code> and a minimal browser E2E harness.</p>"},{"location":"guides/typing/","title":"Typing","text":""},{"location":"guides/typing/#typing","title":"Typing","text":"<p>The codebase uses type hints and aims for clarity over cleverness.</p> <p>Guidelines:</p> <ul> <li>Prefer precise types on public APIs; avoid <code>Any</code></li> <li>Use <code>Optional[...]</code> where values can be absent</li> <li>In Pyodide/browser interop, tolerate <code>Any</code> at boundaries but narrow types internally</li> </ul> <p>TODO: Add mypy config notes and examples from <code>reactivity.py</code> and <code>router.py</code>.</p>"},{"location":"meta/changelog/","title":"Changelog","text":""},{"location":"meta/changelog/#changelog","title":"Changelog","text":"<p>See <code>pyproject.toml</code> for the current version. For release notes, see the GitHub Releases.</p> <p>TODO: Sync with <code>CHANGELOG.md</code> once maintained.</p>"},{"location":"meta/contributing/","title":"Contributing","text":""},{"location":"meta/contributing/#contributing","title":"Contributing","text":"<p>See the repository\u2019s <code>CONTRIBUTING.md</code> for full guidelines.</p> <p>Quick start:</p> <pre><code>git clone https://github.com/wybthon/wybthon.git\ncd wybthon\npip install -e .\n</code></pre> <p>TODO: Sync this page with any updates in <code>CONTRIBUTING.md</code> automatically (or link only).</p>"},{"location":"meta/faq/","title":"FAQ","text":""},{"location":"meta/faq/#faq","title":"FAQ","text":"<ul> <li>Q: Is Wybthon production ready?</li> <li> <p>A: Not yet. It\u2019s experimental (pre-alpha).</p> </li> <li> <p>Q: Does it work outside the browser?</p> </li> <li>A: Core reactive primitives do, but rendering and DOM APIs require Pyodide/browser.</li> </ul> <p>TODO: Expand with common Pyodide and packaging questions.</p>"},{"location":"meta/roadmap/","title":"Roadmap","text":""},{"location":"meta/roadmap/#roadmap","title":"Roadmap","text":"<ul> <li>Short term</li> <li>Stabilize reactivity scheduling and resource cancellation</li> <li>Document component authoring patterns</li> <li>Medium term</li> <li>Nested routing and code-splitting examples</li> <li>Better error boundary ergonomics</li> <li>Long term</li> <li>SSR story (research)</li> <li>CLI scaffolding for apps (research)</li> </ul> <p>TODO: Convert this into GitHub milestones.</p>"},{"location":"meta/troubleshooting/","title":"Troubleshooting","text":""},{"location":"meta/troubleshooting/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues:</p> <ul> <li>Pyodide fails to load: check network and CDN URL; try a local copy</li> <li>SSE reloads not firing: ensure the dev server is running and <code>/__sse</code> is reachable</li> <li>Events not triggering: confirm handler prop names (e.g., <code>on_click</code>)</li> </ul> <p>TODO: Add error messages and remedies from real-world usage.</p>"}]}