{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Wybthon","text":"<p>Wybthon is a client-side Python SPA framework that runs in the browser via Pyodide.</p>"},{"location":"#what-is-wybthon","title":"What is Wybthon?","text":"<p>Build interactive web apps in Python that execute entirely in the browser. Wybthon provides a Virtual DOM renderer, reactive primitives, routing, forms, and DOM/event interop, all designed for Pyodide.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Virtual DOM renderer with function and class components</li> <li>Reactive primitives: <code>signal</code>, <code>computed</code>, <code>effect</code>, <code>batch</code>, and <code>use_resource</code></li> <li>Router with path params, query parsing, and a <code>Link</code> component</li> <li>Contexts and a <code>Provider</code> component</li> <li>DOM helpers and event delegation</li> <li>Forms state, validators, and bindings</li> <li>Dev server with hot-reload (SSE)</li> </ul>"},{"location":"#quickstart","title":"Quickstart","text":"<p>1) Clone the repo and run the demo:</p> <pre><code>python -m http.server\n# open http://localhost:8000/examples/demo/index.html\n</code></pre> <p>2) Or run the dev server with auto-reload:</p> <pre><code>pip install .\nwyb dev --dir .\n</code></pre> <p>3) Explore the demo app in <code>examples/demo</code> and the API in the Concepts and API sections.</p>"},{"location":"#documentation-map","title":"Documentation map","text":"<ul> <li>Getting Started: install, run the demo, dev server</li> <li>Concepts: deep dives into VDOM, components, reactivity, router, context, events, forms, DOM, error boundaries</li> <li>Guides: dev server, demo app, Pyodide integration, deployment, testing, performance, typing</li> <li>Examples: walkthroughs for the demo\u2019s pages and patterns</li> <li>API Reference: auto-generated docs per module via mkdocstrings</li> </ul> <p>TODO: Add a small end-to-end example on the homepage once the component authoring guide is finalized. TODO: Add a screenshot of the demo app landing page.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#wybthon.Component","title":"<code>Component</code>","text":"<p>Class component base for the VDOM renderer.</p> <p>Subclasses should implement <code>render(self) -&gt; VNode</code>. Lifecycle hooks:   - on_mount(self)   - on_update(self, prev_props: dict)   - on_unmount(self)</p>"},{"location":"api/#wybthon.Component.on_mount","title":"<code>on_mount()</code>","text":"<p>Called after the component is first mounted.</p>"},{"location":"api/#wybthon.Component.on_unmount","title":"<code>on_unmount()</code>","text":"<p>Called before the component is removed from the DOM.</p>"},{"location":"api/#wybthon.Component.on_update","title":"<code>on_update(prev_props)</code>","text":"<p>Called after props update and render diff applied.</p>"},{"location":"api/#wybthon.ErrorBoundary","title":"<code>ErrorBoundary</code>","text":"<p>               Bases: <code>Component</code></p> <p>Component that catches errors in its subtree and renders a fallback.</p>"},{"location":"api/#wybthon.Provider","title":"<code>Provider</code>","text":"<p>               Bases: <code>Component if Component is not None else object</code></p> <p>Context provider component.</p> Props <ul> <li>context: Context</li> <li>value: Any</li> <li>children: VNode or list of VNodes</li> </ul>"},{"location":"api/#wybthon.Suspense","title":"<code>Suspense</code>","text":"<p>               Bases: <code>Component</code></p> <p>Render a fallback while one or more resources are loading.</p> Props <ul> <li>resources | resource: Resource or list of Resources (objects exposing <code>.loading.get()</code>)</li> <li>fallback: VNode | str | callable returning VNode/str</li> <li>keep_previous: bool (default False) \u2013 when True, keep children visible after first   successful load even if a subsequent reload is in-flight.</li> </ul>"},{"location":"api/#wybthon.load_component","title":"<code>load_component(module_path, attr=None)</code>","text":"<p>Dynamically import a module (optionally attribute) and return a function component factory.</p> <p>The returned function component will render a small loader until the module is imported. On success it will render the loaded component with the same props. On error, it renders a minimal error text.</p> <p>This utility is Pyodide-friendly: it uses Python's import system, which is compatible with packages pre-bundled or fetched via micropip. Use <code>preload_component</code> to warm the cache.</p>"},{"location":"api/#wybthon.preload_component","title":"<code>preload_component(module_path, attr=None)</code>","text":"<p>Eagerly import a component to warm caches before navigation.</p>"},{"location":"api/#wybthon.use_resource","title":"<code>use_resource(fetcher)</code>","text":"<p>Create an async Resource with loading/error states and cancellation.</p> <p>The provided <code>fetcher</code> should be an async function returning the data value. If it accepts a <code>signal</code> keyword argument, an AbortSignal will be passed for cancellation support when available.</p>"},{"location":"examples/","title":"Examples","text":"<p>Walk through focused examples mirroring the demo app pages.</p> <ul> <li>Counter: <code>examples/counter.md</code></li> <li>Async Fetch: <code>examples/fetch.md</code></li> <li>Forms: <code>examples/forms.md</code></li> <li>Error Boundary: <code>examples/errors.md</code></li> <li>Router: <code>examples/router.md</code></li> </ul> <p>Tip: Run <code>python -m http.server</code> and open the demo at <code>/examples/demo/index.html</code> to see these in action.</p> <p>TODO: Add links/screenshots once example pages include embedded snippets.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Follow these steps to run the demo and start hacking on Wybthon.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9+</li> <li>A modern browser</li> </ul>"},{"location":"getting-started/#run-the-demo-no-install","title":"Run the demo (no install)","text":"<pre><code>python -m http.server\n# Then open http://localhost:8000/examples/demo/index.html\n</code></pre> <p>The demo loads Pyodide, mounts the library from <code>src/wybthon/</code>, then runs the app under <code>examples/demo/app/</code>.</p>"},{"location":"getting-started/#dev-server-with-auto-reload","title":"Dev server with auto-reload","text":"<p>Install the package locally (for the <code>wyb</code> CLI), then start the dev server:</p> <pre><code>pip install .\nwyb dev --dir .\n</code></pre> <p>Flags:</p> <ul> <li><code>--host</code> (default <code>127.0.0.1</code>)</li> <li><code>--port</code> (default <code>8000</code>, auto-increments on conflict)</li> <li><code>--watch</code> (defaults to <code>src</code> and <code>examples</code>)</li> </ul> <p>The dev server exposes an SSE endpoint (<code>/__sse</code>) that the demo listens to for reload events.</p>"},{"location":"getting-started/#install-from-pypi-experimental","title":"Install from PyPI (experimental)","text":"<pre><code>pip install wybthon\n</code></pre> <p>In Pyodide via <code>micropip</code>:</p> <pre><code>import micropip\nawait micropip.install(\"wybthon\")\n</code></pre> <p>TODO: Provide a minimal component example here once the authoring flow is finalized (function vs class components, recommended structure).</p>"},{"location":"getting-started/#minimal-component-example","title":"Minimal component example","text":"<p>Function component:</p> <pre><code>from wybthon import h, render, Element\n\ndef Hello(props):\n    name = props.get(\"name\", \"world\")\n    return h(\"h2\", {}, f\"Hello, {name}!\")\n\ntree = h(Hello, {\"name\": \"Python\"})\ncontainer = Element(\"body\", existing=True)\nrender(tree, container)\n</code></pre> <p>Class component with state:</p> <pre><code>from wybthon import Component, h, signal, render, Element\n\nclass Counter(Component):\n    def __init__(self, props):\n        super().__init__(props)\n        self.count = signal(0)\n\n    def render(self):\n        return h(\n            \"div\",\n            {},\n            h(\"p\", {}, f\"Count: {self.count.get()}\"),\n            h(\"button\", {\"on_click\": lambda e: self.count.set(self.count.get() + 1)}, \"Increment\"),\n        )\n\ntree = h(Counter, {})\ncontainer = Element(\"body\", existing=True)\nrender(tree, container)\n</code></pre> <p>See: Authoring Patterns</p>"},{"location":"api/component/","title":"component","text":""},{"location":"api/component/#wybthoncomponent","title":"wybthon.component","text":""},{"location":"api/component/#wybthon.component.Component","title":"<code>Component</code>","text":"<p>Class component base for the VDOM renderer.</p> <p>Subclasses should implement <code>render(self) -&gt; VNode</code>. Lifecycle hooks:   - on_mount(self)   - on_update(self, prev_props: dict)   - on_unmount(self)</p>"},{"location":"api/component/#wybthon.component.Component.on_mount","title":"<code>on_mount()</code>","text":"<p>Called after the component is first mounted.</p>"},{"location":"api/component/#wybthon.component.Component.on_unmount","title":"<code>on_unmount()</code>","text":"<p>Called before the component is removed from the DOM.</p>"},{"location":"api/component/#wybthon.component.Component.on_update","title":"<code>on_update(prev_props)</code>","text":"<p>Called after props update and render diff applied.</p>"},{"location":"api/context/","title":"context","text":""},{"location":"api/context/#wybthoncontext","title":"wybthon.context","text":""},{"location":"api/context/#wybthon.context.Provider","title":"<code>Provider</code>","text":"<p>               Bases: <code>Component if Component is not None else object</code></p> <p>Context provider component.</p> Props <ul> <li>context: Context</li> <li>value: Any</li> <li>children: VNode or list of VNodes</li> </ul>"},{"location":"api/dom/","title":"dom","text":""},{"location":"api/dom/#wybthondom","title":"wybthon.dom","text":""},{"location":"api/events/","title":"events","text":""},{"location":"api/events/#wybthonevents","title":"wybthon.events","text":"<p>Wybthon\u2019s event system provides delegated event handling and a thin <code>DomEvent</code> wrapper.</p> <ul> <li><code>DomEvent</code>: wrapper with <code>type</code>, <code>target</code> (<code>Element|None</code>), <code>current_target</code> (<code>Element|None</code>), <code>prevent_default()</code>, <code>stop_propagation()</code>.</li> <li>Handlers can be attached via props like <code>on_click</code>, <code>on_input</code>, or <code>onChange</code>. Names are normalized to DOM event types.</li> <li>Delegation is automatic and handlers are cleaned up on unmount.</li> </ul>"},{"location":"api/forms/","title":"forms","text":""},{"location":"api/forms/#wybthonforms","title":"wybthon.forms","text":""},{"location":"api/reactivity/","title":"reactivity","text":""},{"location":"api/reactivity/#wybthonreactivity","title":"wybthon.reactivity","text":""},{"location":"api/reactivity/#wybthon.reactivity.Resource","title":"<code>Resource</code>","text":"<p>               Bases: <code>Generic[R]</code></p> <p>Async resource wrapper with Signals for data, error, and loading.</p> <p>Use <code>reload()</code> to (re)fetch, <code>cancel()</code> to cancel the in-flight request.</p>"},{"location":"api/reactivity/#wybthon.reactivity.use_resource","title":"<code>use_resource(fetcher)</code>","text":"<p>Create an async Resource with loading/error states and cancellation.</p> <p>The provided <code>fetcher</code> should be an async function returning the data value. If it accepts a <code>signal</code> keyword argument, an AbortSignal will be passed for cancellation support when available.</p>"},{"location":"api/router/","title":"router","text":""},{"location":"api/router/#wybthonrouter","title":"wybthon.router","text":""},{"location":"api/router/#api","title":"API","text":"<ul> <li><code>class Route(path: str, component, children: Optional[List[Route]] = None)</code></li> <li><code>class Router(routes: List[Route], base_path: str = \"\", not_found: Optional[Component|function] = None)</code></li> <li><code>function Link({to: str, children, base_path?: str, replace?: bool, class_active?: str})</code></li> <li><code>function navigate(path: str, replace: bool = False)</code></li> <li><code>signal current_path</code> \u2013 reactive signal with current <code>path + search</code></li> </ul> <p>Notes: - Wildcard path segment <code>*</code> captures the rest of the path into <code>params[\"wildcard\"]</code>. - Trailing <code>/*</code> also matches the base segment; e.g. <code>/docs/*</code> matches <code>/docs</code> and <code>/docs/guide</code>. - Nested routes use <code>children</code> and resolve to the most specific match.   - <code>Link</code> automatically adds an active CSS class (default: <code>\"active\"</code>) when its <code>href</code> matches the current pathname. Customize with <code>class_active</code>. Use <code>replace=True</code> to avoid pushing a new history entry.</p>"},{"location":"api/vdom/","title":"vdom","text":""},{"location":"api/vdom/#wybthonvdom","title":"wybthon.vdom","text":""},{"location":"api/vdom/#wybthon.vdom.ErrorBoundary","title":"<code>ErrorBoundary</code>","text":"<p>               Bases: <code>Component</code></p> <p>Component that catches errors in its subtree and renders a fallback.</p>"},{"location":"api/vdom/#wybthon.vdom.Suspense","title":"<code>Suspense</code>","text":"<p>               Bases: <code>Component</code></p> <p>Render a fallback while one or more resources are loading.</p> Props <ul> <li>resources | resource: Resource or list of Resources (objects exposing <code>.loading.get()</code>)</li> <li>fallback: VNode | str | callable returning VNode/str</li> <li>keep_previous: bool (default False) \u2013 when True, keep children visible after first   successful load even if a subsequent reload is in-flight.</li> </ul>"},{"location":"api/vdom/#suspense","title":"Suspense","text":"<p><code>Suspense</code> renders a <code>fallback</code> while one or more resources are loading.</p> <ul> <li>Props:</li> <li><code>resource</code> or <code>resources=[...]</code></li> <li><code>fallback</code> \u2013 VNode/str/callable</li> <li><code>keep_previous=False</code> \u2013 keep children visible during subsequent reloads</li> </ul>"},{"location":"api/wybthon/","title":"Package","text":""},{"location":"api/wybthon/#wybthon-package","title":"wybthon (package)","text":""},{"location":"api/wybthon/#wybthon.Component","title":"<code>Component</code>","text":"<p>Class component base for the VDOM renderer.</p> <p>Subclasses should implement <code>render(self) -&gt; VNode</code>. Lifecycle hooks:   - on_mount(self)   - on_update(self, prev_props: dict)   - on_unmount(self)</p>"},{"location":"api/wybthon/#wybthon.Component.on_mount","title":"<code>on_mount()</code>","text":"<p>Called after the component is first mounted.</p>"},{"location":"api/wybthon/#wybthon.Component.on_unmount","title":"<code>on_unmount()</code>","text":"<p>Called before the component is removed from the DOM.</p>"},{"location":"api/wybthon/#wybthon.Component.on_update","title":"<code>on_update(prev_props)</code>","text":"<p>Called after props update and render diff applied.</p>"},{"location":"api/wybthon/#wybthon.ErrorBoundary","title":"<code>ErrorBoundary</code>","text":"<p>               Bases: <code>Component</code></p> <p>Component that catches errors in its subtree and renders a fallback.</p>"},{"location":"api/wybthon/#wybthon.Provider","title":"<code>Provider</code>","text":"<p>               Bases: <code>Component if Component is not None else object</code></p> <p>Context provider component.</p> Props <ul> <li>context: Context</li> <li>value: Any</li> <li>children: VNode or list of VNodes</li> </ul>"},{"location":"api/wybthon/#wybthon.Suspense","title":"<code>Suspense</code>","text":"<p>               Bases: <code>Component</code></p> <p>Render a fallback while one or more resources are loading.</p> Props <ul> <li>resources | resource: Resource or list of Resources (objects exposing <code>.loading.get()</code>)</li> <li>fallback: VNode | str | callable returning VNode/str</li> <li>keep_previous: bool (default False) \u2013 when True, keep children visible after first   successful load even if a subsequent reload is in-flight.</li> </ul>"},{"location":"api/wybthon/#wybthon.load_component","title":"<code>load_component(module_path, attr=None)</code>","text":"<p>Dynamically import a module (optionally attribute) and return a function component factory.</p> <p>The returned function component will render a small loader until the module is imported. On success it will render the loaded component with the same props. On error, it renders a minimal error text.</p> <p>This utility is Pyodide-friendly: it uses Python's import system, which is compatible with packages pre-bundled or fetched via micropip. Use <code>preload_component</code> to warm the cache.</p>"},{"location":"api/wybthon/#wybthon.preload_component","title":"<code>preload_component(module_path, attr=None)</code>","text":"<p>Eagerly import a component to warm caches before navigation.</p>"},{"location":"api/wybthon/#wybthon.use_resource","title":"<code>use_resource(fetcher)</code>","text":"<p>Create an async Resource with loading/error states and cancellation.</p> <p>The provided <code>fetcher</code> should be an async function returning the data value. If it accepts a <code>signal</code> keyword argument, an AbortSignal will be passed for cancellation support when available.</p>"},{"location":"api/wybthon/#notable-exports","title":"Notable exports","text":"<ul> <li><code>lazy(loader)</code> \u2013 create a lazily-loaded component from a <code>(module_path, attr?)</code> loader</li> <li><code>load_component(module_path, attr=None)</code> \u2013 load a component function/class from a module</li> <li><code>preload_component(module_path, attr=None)</code> \u2013 eagerly import a module to warm cache</li> <li><code>Suspense</code> \u2013 component that renders <code>fallback</code> while provided <code>resource(s)</code> are loading; accepts <code>keep_previous</code></li> </ul>"},{"location":"concepts/components/","title":"Components","text":""},{"location":"concepts/components/#components","title":"Components","text":"<p>Wybthon supports both function and class components.</p>"},{"location":"concepts/components/#function-components","title":"Function components","text":"<pre><code>from wybthon import h\n\ndef Hello(props):\n    name = props.get(\"name\", \"world\")\n    return h(\"div\", {}, f\"Hello {name}\")\n</code></pre>"},{"location":"concepts/components/#class-components","title":"Class components","text":"<pre><code>from wybthon import Component, h\n\nclass Counter(Component):\n    def render(self):\n        return h(\"div\", {}, \"Counter here\")\n</code></pre> <p>Lifecycle hooks for class components: <code>on_mount</code>, <code>on_update(prev_props)</code>, <code>on_unmount</code>.</p> <p>See the guide for recommended patterns around props, state, children, cleanup, and context:</p> <ul> <li>Guide: Authoring Patterns</li> </ul>"},{"location":"concepts/context/","title":"Context","text":""},{"location":"concepts/context/#context","title":"Context","text":"<p>Provide and consume values across the tree.</p> <pre><code>from wybthon import h\nfrom wybthon.context import create_context, Provider, use_context\n\nTheme = create_context(\"light\")\n\ndef Label(props):\n    theme = use_context(Theme)\n    return h(\"span\", {}, f\"Theme: {theme}\")\n\nview = h(Provider, {\"context\": Theme, \"value\": \"dark\", \"children\": [h(Label, {})]})\n</code></pre> <p>TODO: Document provider scoping and performance notes.</p>"},{"location":"concepts/dom/","title":"DOM Interop","text":""},{"location":"concepts/dom/#dom-interop","title":"DOM Interop","text":"<p><code>Element</code> is a thin wrapper around DOM nodes with helpers for attributes, classes, events, and querying.</p> <pre><code>from wybthon.dom import Element\n\nroot = Element(\"#app\", existing=True)\ndiv = Element(\"div\")\ndiv.set_text(\"Hello\")\ndiv.append_to(root)\n</code></pre> <p>TODO: Explain refs and how VDOM uses <code>Element</code> under the hood.</p>"},{"location":"concepts/error-boundaries/","title":"Error Boundaries","text":""},{"location":"concepts/error-boundaries/#error-boundaries","title":"Error Boundaries","text":"<p><code>ErrorBoundary</code> catches errors thrown during render of its subtree and renders a fallback.</p> <pre><code>from wybthon.vdom import ErrorBoundary\nfrom wybthon import h\n\ndef fallback(err):\n    return h(\"div\", {\"class\": \"error\"}, f\"Oops: {err}\")\n\nview = h(ErrorBoundary, {\"fallback\": fallback, \"children\": [\"TODO: child\"]})\n</code></pre> <p>TODO: Document reset behavior and limitations.</p>"},{"location":"concepts/events/","title":"Events","text":""},{"location":"concepts/events/#events","title":"Events","text":"<p>Event handlers are delegated at the document root.</p> <pre><code>from wybthon import h\n\ndef Button(props):\n    return h(\"button\", {\"on_click\": lambda evt: print(\"clicked\")}, \"Click\")\n</code></pre> <p>Supported prop names: <code>on_click</code>, <code>on_input</code>, <code>on_change</code>, etc. Both <code>on_foo</code> and <code>onFoo</code> styles are supported; they normalize to DOM event names.</p>"},{"location":"concepts/events/#domevent","title":"DomEvent","text":"<p>Handlers receive a <code>DomEvent</code> object that wraps the browser event and provides a small, Python-friendly surface:</p> <ul> <li><code>type</code>: the event type string (e.g., <code>\"click\"</code>, <code>\"input\"</code>).</li> <li><code>target</code>: an <code>Element</code> for the original event target node (or <code>None</code>). Access the underlying DOM node via <code>target.element</code>.</li> <li><code>current_target</code>: an <code>Element</code> for the node whose handler is currently running during delegated bubbling. This is set for you before your handler is called.</li> <li><code>prevent_default()</code>: calls <code>preventDefault()</code> on the underlying JS event, if available. Safe to call in non-browser tests.</li> <li><code>stop_propagation()</code>: stops delegated propagation within Wybthon\u2019s dispatcher for this event. It also attempts to call the underlying JS <code>stopPropagation()</code> when available.</li> </ul> <p>Example:</p> <pre><code>from wybthon import h\n\ndef Form(props):\n    def on_submit(evt):\n        evt.prevent_default()\n        print(\"submitted from\", evt.current_target)\n\n    return h(\"form\", {\"on_submit\": on_submit},\n             h(\"input\", {\"name\": \"q\", \"on_input\": lambda e: print(\"input\", e.target)}),\n             h(\"button\", {\"type\": \"submit\"}, \"Go\"))\n</code></pre>"},{"location":"concepts/events/#delegation-model","title":"Delegation model","text":"<p>Wybthon installs one document-level listener per event type on first use and walks up from the original <code>target</code> to parent nodes, invoking any handlers that were registered on matching virtual nodes. <code>stop_propagation()</code> prevents further bubbling within Wybthon\u2019s dispatcher. Handlers are automatically removed when nodes unmount.</p>"},{"location":"concepts/events/#naming-and-normalization","title":"Naming and normalization","text":"<ul> <li><code>on_click</code> \u2192 <code>\"click\"</code></li> <li><code>onInput</code>/<code>on_input</code> \u2192 <code>\"input\"</code></li> <li>Any prop starting with <code>on_</code> or <code>on</code> is treated as an event handler; non-callable values are ignored.</li> </ul>"},{"location":"concepts/forms/","title":"Forms","text":""},{"location":"concepts/forms/#forms","title":"Forms","text":"<p>Form state helpers and validators.</p> <pre><code>from wybthon.forms import form_state, bind_text, required, min_length\nfrom wybthon import h\n\nfields = form_state({\"email\": \"\", \"agree\": False})\n\ndef View(props):\n    email = fields[\"email\"]\n    return h(\"form\", {\"on_submit\": lambda e: print(\"submit\")},\n             h(\"input\", {**bind_text(email, validators=[required(), min_length(3)])}),\n             h(\"div\", {}, email.error.get() or \"\"))\n</code></pre> <p>TODO: Add checkbox/select bindings and <code>on_submit</code> example with validation.</p>"},{"location":"concepts/reactivity/","title":"Reactivity","text":""},{"location":"concepts/reactivity/#reactivity","title":"Reactivity","text":"<p>Signals drive the render pipeline.</p> <pre><code>from wybthon import signal, computed, effect, batch\n\ncount = signal(0)\ndouble = computed(lambda: count.get() * 2)\n\ndef log():\n    print(\"double:\", double.get())\n\neff = effect(log)\ncount.set(1)\n</code></pre> <ul> <li><code>signal(value)</code> \u2192 get/set</li> <li><code>computed(fn)</code> \u2192 derived; dispose when not needed</li> <li><code>effect(fn)</code> \u2192 runs and re-runs on dependencies</li> <li><code>batch()</code> \u2192 batch updates and schedule once</li> <li><code>use_resource(fetcher)</code> \u2192 async data with loading/error signals</li> </ul>"},{"location":"concepts/reactivity/#scheduling-semantics","title":"Scheduling semantics","text":"<p>Effects are scheduled on a microtask in Pyodide via <code>queueMicrotask</code> when available, with fallbacks to <code>setTimeout(0)</code> and a pure-Python timer in non-browser environments. Wybthon guarantees deterministic FIFO ordering for effect re-runs: subscribers are notified in subscription order, and any updates scheduled during a flush are deferred to the next microtask to avoid reentrancy.</p> <p><code>batch()</code> coalesces multiple <code>set()</code> operations into a single flush at the end of the batch.</p>"},{"location":"concepts/reactivity/#disposal","title":"Disposal","text":"<p>Calling <code>dispose()</code> on a computation cancels its subscriptions and removes any pending re-runs from the queue. Cleanup functions registered via <code>on_effect_cleanup</code> are executed during disposal.</p>"},{"location":"concepts/reactivity/#resources-cancellation-and-suspense","title":"Resources, cancellation, and Suspense","text":"<p><code>use_resource(fetcher)</code> creates a <code>Resource</code> with <code>data</code>, <code>error</code>, and <code>loading</code> signals. Calling <code>reload()</code> starts a new fetch and sets <code>loading=True</code>. Calling <code>cancel()</code> aborts any in-flight JS fetch (via <code>AbortController</code> when available), cancels the Python task, invalidates the current version to ignore late results, and sets <code>loading=False</code>.</p> <p>To render a loading UI declaratively, wrap UI with <code>Suspense</code> and pass a <code>resource</code> (or <code>resources=[...]</code>) and a <code>fallback</code>:</p> <pre><code>from wybthon import Suspense, h, use_resource\n\nasync def load_user(signal=None):\n    # ... fetch user ...\n    return {\"name\": \"Ada\"}\n\nres = use_resource(load_user)\n\nview = h(\n    Suspense,\n    {\"resource\": res, \"fallback\": h(\"p\", {}, \"Loading user...\")},\n    h(\"pre\", {}, lambda p: str(res.data.get())),\n)\n</code></pre> <ul> <li>Pass <code>keep_previous=True</code> to keep previously rendered children visible during subsequent reloads while still showing new data once ready.</li> </ul>"},{"location":"concepts/router/","title":"Router","text":""},{"location":"concepts/router/#router","title":"Router","text":"<p>Client-side routing with path params and query parsing.</p> <pre><code>from wybthon import h\nfrom wybthon.router import Router, Route, Link\n\ndef Home(props):\n    return h(\"div\", {}, \"Home\")\n\nroutes = [\n    Route(path=\"/\", component=Home),\n]\n\napp = h(Router, {\"routes\": routes})\n</code></pre> <ul> <li><code>navigate(path, replace=False)</code> updates history and <code>current_path</code></li> <li><code>Link</code> intercepts clicks for SPA navigation and applies an active class when matched</li> </ul>"},{"location":"concepts/router/#dynamic-params-and-queries","title":"Dynamic params and queries","text":"<pre><code>Route(path=\"/users/:id\", component=UserPage)\n# /users/42?tab=activity \u2192 props[\"params\"][\"id\"] == \"42\", props[\"query\"][\"tab\"] == \"activity\"\n</code></pre>"},{"location":"concepts/router/#nested-routes-with-routechildren","title":"Nested routes with <code>Route.children</code>","text":"<pre><code>routes = [\n    Route(\n        path=\"/about\",\n        component=About,\n        children=[\n            Route(path=\"team\", component=Team),  # matches /about/team\n        ],\n    ),\n]\n</code></pre>"},{"location":"concepts/router/#wildcards-and-404","title":"Wildcards and 404","text":"<pre><code>Route(path=\"/docs/*\", component=Docs)  # params[\"wildcard\"] contains the trailing path or \"\"\n\napp = h(Router, {\"routes\": routes, \"not_found\": NotFound})  # optional custom 404\n</code></pre>"},{"location":"concepts/router/#base-path","title":"Base path","text":"<pre><code>app = h(Router, {\"routes\": routes, \"base_path\": \"/app\"})\n# Link respects base path; Link({\"to\": \"/about\"}) \u2192 href \"/app/about\"\n</code></pre>"},{"location":"concepts/router/#active-links-and-replace-navigation","title":"Active links and replace navigation","text":"<pre><code># `Link` adds `class=\"active\"` when the current path matches its href.\nh(Link, {\"to\": \"/about\", \"class\": \"nav-link\"}, \"About\")\n# Customize class name and avoid pushing history with replace\nh(Link, {\"to\": \"/about\", \"class_active\": \"is-active\", \"replace\": True}, \"About (replace)\")\n\n# Imperative navigation\nfrom wybthon.router import navigate\nnavigate(\"/about\", replace=True)\n</code></pre>"},{"location":"concepts/router/#lazy-routes-and-preloading","title":"Lazy routes and preloading","text":"<p>Lazily load route components to reduce initial load time. Use <code>load_component</code> for direct module paths or <code>lazy</code> for a small loader function. Both are Pyodide-compatible.</p> <pre><code>from wybthon import load_component, lazy\nfrom wybthon.router import Route\n\n# Load a component from a module that exports Page(props)\nDocs = load_component(\"examples.demo.app.docs.page\", \"Page\")\n\n# Or define a loader function returning (module_path, optional_attr)\ndef AboutLazy():\n    return (\"examples.demo.app.about.page\", \"Page\")\n\nroutes = [\n    Route(path=\"/docs/*\", component=Docs),\n    Route(path=\"/about\", component=lazy(AboutLazy)),\n]\n</code></pre> <p>Preload components ahead of time (e.g., on hover) to hide load time:</p> <pre><code>from wybthon import preload_component\n\ndef on_hover_about(_evt):\n    preload_component(\"examples.demo.app.about.page\", \"Page\")\n</code></pre> <p>Notes for Pyodide: - Ensure the module is available in the Pyodide filesystem or installed via <code>micropip</code>. Static bundling is recommended for demo apps. - Dynamic imports are synchronous from Python\u2019s perspective but may involve underlying network fetches when using <code>micropip</code>. Use <code>preload_component</code> to warm caches before navigation.</p> <p>Migration notes: - Prior versions did not include <code>Link</code> active styling. If you previously computed active state manually, you can remove that logic and rely on <code>Link</code>'s built-in active class. - Use the new <code>replace=True</code> option on both <code>Link</code> and <code>navigate()</code> when you want to update the URL without adding a history entry (e.g., tab switches).</p>"},{"location":"concepts/vdom/","title":"Virtual DOM","text":""},{"location":"concepts/vdom/#virtual-dom","title":"Virtual DOM","text":"<p>The VDOM is represented by <code>VNode</code> and created via <code>h(tag, props, *children)</code>.</p> <ul> <li><code>tag</code>: string (DOM node) or callable (component)</li> <li><code>props</code>: attributes, event handlers, and special props like <code>key</code></li> <li><code>children</code>: strings or <code>VNode</code>s</li> </ul> <pre><code>from wybthon import h\n\nview = h(\"div\", {\"class\": \"app\"},\n          h(\"h1\", {}, \"Hello\"),\n          h(\"p\", {}, \"Welcome\"))\n</code></pre> <p>Rendering is done with <code>vdom.render(view, container)</code>.</p> <p>TODO: Document keyed diffing, normalization rules, and error boundaries interaction.</p>"},{"location":"examples/counter/","title":"Counter","text":""},{"location":"examples/counter/#counter","title":"Counter","text":"<p>Demonstrates state updates with <code>signal</code> inside a class component.</p> <pre><code>from wybthon import Component, h, signal\n\nclass Counter(Component):\n    def __init__(self, props):\n        super().__init__(props)\n        self.count = signal(0)\n\n    def render(self):\n        return h(\"div\", {},\n                 h(\"p\", {}, f\"Count: {self.count.get()}\"),\n                 h(\"button\", {\"on_click\": lambda e: self.count.set(self.count.get() + 1)}, \"Increment\"))\n</code></pre> <p>Function component variant (stateless presentation wrapping a class instance is recommended for state, but for simple counters you can inline):</p> <pre><code>from wybthon import h\n\ndef CounterFn(props):\n    # This example demonstrates a presentational wrapper around the class version.\n    # Prefer class components for stateful logic.\n    from app.components.counter import Counter as CounterClass\n    return h(CounterClass, props)\n</code></pre> <p>See also: Authoring Patterns</p>"},{"location":"examples/errors/","title":"Error Boundary","text":""},{"location":"examples/errors/#error-boundary","title":"Error Boundary","text":"<p>Catch render errors and show a fallback.</p> <pre><code>from wybthon.vdom import ErrorBoundary\nfrom wybthon import h\n\ndef Boom(props):\n    raise RuntimeError(\"boom\")\n\ndef fb(err):\n    return h(\"div\", {}, f\"Oops: {err}\")\n\nview = h(ErrorBoundary, {\"fallback\": fb, \"children\": [h(Boom, {})]})\n</code></pre> <p>TODO: Show boundary reset and nested boundaries.</p>"},{"location":"examples/fetch/","title":"Async Fetch","text":""},{"location":"examples/fetch/#async-fetch","title":"Async Fetch","text":"<p>Fetch data with <code>use_resource</code>.</p> <pre><code>from wybthon import Suspense, h\nfrom wybthon.reactivity import use_resource\n\nasync def load_data(signal=None):\n    # e.g., using js.fetch with AbortSignal\n    return {\"message\": \"hello\"}\n\nres = use_resource(load_data)\n\ndef Content(props):\n    if res.error.get():\n        return h(\"div\", {}, f\"Error: {res.error.get()}\")\n    return h(\"pre\", {}, str(res.data.get()))\n\nView = lambda props: h(\n    Suspense,\n    {\"resource\": res, \"fallback\": h(\"div\", {}, \"Loading...\"), \"keep_previous\": True},\n    Content({}),\n)\n</code></pre>"},{"location":"examples/forms/","title":"Forms","text":""},{"location":"examples/forms/#forms","title":"Forms","text":"<p>Bindings and validation.</p> <pre><code>from wybthon.forms import form_state, bind_text, required\nfrom wybthon import h\n\nfields = form_state({\"email\": \"\"})\n\ndef View(props):\n    email = fields[\"email\"]\n    return h(\"form\", {\"on_submit\": lambda e: print(\"submit\")},\n             h(\"input\", {**bind_text(email, validators=[required()])}),\n             h(\"div\", {}, email.error.get() or \"\"))\n</code></pre> <p>TODO: Add checkbox/select and a full submit handler.</p>"},{"location":"examples/router/","title":"Router","text":""},{"location":"examples/router/#router","title":"Router","text":"<p>Basic routing with <code>Router</code> and <code>Link</code>.</p> <pre><code>from wybthon.router import Router, Route, Link\nfrom wybthon import h\n\ndef Home(props):\n    return h(\"div\", {}, \"Home\", h(\"div\", {}, h(Link, {\"to\": \"/about\", \"children\": [\"About\"]})))\n\ndef About(props):\n    return h(\"div\", {}, \"About\")\n\nroutes = [\n    Route(path=\"/\", component=Home),\n    Route(path=\"/about\", component=About),\n]\n\napp = h(Router, {\"routes\": routes})\n</code></pre> <p>Active links and replace navigation:</p> <pre><code># Adds class=\"active\" when matched\nh(Link, {\"to\": \"/about\", \"children\": [\"About\"]})\n\n# Custom active class and replace behavior\nh(Link, {\"to\": \"/about\", \"class_active\": \"is-active\", \"replace\": True, \"children\": [\"About\"]})\n\n# Imperative navigation with replace\nfrom wybthon.router import navigate\nnavigate(\"/about\", replace=True)\n</code></pre>"},{"location":"examples/router/#lazy-routes","title":"Lazy routes","text":"<pre><code>from wybthon import load_component, lazy, preload_component\nfrom wybthon.router import Router, Route\n\nDocs = load_component(\"app.docs.page\", \"Page\")\n\ndef TeamLazy():\n    return (\"app.about.team.page\", \"Page\")\n\nroutes = [\n    Route(path=\"/docs/*\", component=Docs),\n    Route(path=\"/about/team\", component=lazy(TeamLazy)),\n]\n\n# Preload on some user intent (e.g., hover)\ndef on_hover_team(_evt):\n    preload_component(\"app.about.team.page\", \"Page\")\n</code></pre> <p>Dynamic params and queries:</p> <pre><code>Route(path=\"/users/:userId\", component=User)\n# /users/123?tab=info \u2192 props[\"params\"][\"userId\"] == \"123\", props[\"query\"][\"tab\"] == \"info\"\n</code></pre> <p>Nested and wildcard routes:</p> <pre><code>routes = [\n    Route(path=\"/about\", component=About, children=[Route(path=\"team\", component=Team)]),\n    Route(path=\"/docs/*\", component=Docs),\n]\n\napp = h(Router, {\"routes\": routes, \"not_found\": NotFound})\n</code></pre>"},{"location":"guides/authoring-patterns/","title":"Authoring Patterns","text":""},{"location":"guides/authoring-patterns/#authoring-patterns","title":"Authoring Patterns","text":"<p>This guide shows how to author components in Wybthon using both function and class styles. It focuses on props, state with <code>signal</code>/<code>computed</code>/<code>effect</code>, children composition, cleanup, and context.</p>"},{"location":"guides/authoring-patterns/#function-components","title":"Function components","text":"<p>Use plain Python callables that receive a <code>props</code> dict and return a VNode via <code>h(...)</code>.</p> <pre><code>from wybthon import h\n\ndef Hello(props):\n    name = props.get(\"name\", \"world\")\n    return h(\"div\", {\"class\": \"hello\"}, f\"Hello, {name}\")\n</code></pre> <ul> <li>Props are read-only; compute derived values inline or via <code>computed</code> when expensive.</li> <li>To accept children, read <code>props.get(\"children\", [])</code>. The VDOM passes children via props for components.</li> </ul> <p>Children handling:</p> <pre><code>def Card(props):\n    title = props.get(\"title\", \"\")\n    children = props.get(\"children\", [])\n    return h(\"section\", {\"class\": \"card\"}, h(\"h3\", {}, title), children)\n</code></pre> <p>Side effects and subscriptions are typically modeled in class components (see below). Function components are best for presentational/stateless pieces.</p>"},{"location":"guides/authoring-patterns/#class-components","title":"Class components","text":"<p>Subclass <code>Component</code> to encapsulate state and lifecycles.</p> <pre><code>from wybthon import Component, h, signal, effect, on_effect_cleanup\n\nclass Counter(Component):\n    def __init__(self, props):\n        super().__init__(props)\n        self.count = signal(0)\n\n        def inc(_evt):\n            self.count.set(self.count.get() + 1)\n\n        self._inc = inc\n\n        # Example: reactive side effect\n        comp = effect(lambda: print(\"count:\", self.count.get()))\n        # Ensure cleanup on unmount\n        on_effect_cleanup(comp, lambda: print(\"effect disposed\"))\n        self.on_cleanup(lambda: comp.dispose())\n\n    def render(self):\n        return h(\n            \"div\",\n            {\"class\": \"counter\"},\n            h(\"p\", {}, f\"Count: {self.count.get()}\"),\n            h(\"button\", {\"on_click\": getattr(self, \"_inc\", lambda e: None)}, \"Increment\"),\n        )\n</code></pre> <ul> <li>State: store <code>signal</code> instances as attributes. Read with <code>.get()</code> during render.</li> <li>Events: pass bound methods or closures via <code>on_click</code>, <code>on_input</code>, etc.</li> <li>Cleanup: register teardown work with <code>on_cleanup(fn)</code> so it runs on unmount.</li> <li>Updates: <code>on_update(prev_props)</code> fires after a prop change and diff is applied.</li> </ul>"},{"location":"guides/authoring-patterns/#props-and-defaults","title":"Props and defaults","text":"<p>Prefer <code>props.get(\"key\", default)</code> when reading optional values. For required props, consider simple guards at the top of <code>render</code>.</p>"},{"location":"guides/authoring-patterns/#passing-and-using-children","title":"Passing and using children","text":"<p>The VDOM passes children via <code>props[\"children\"]</code> for component tags. Normalize to a list when rendering:</p> <pre><code>def Layout(props):\n    children = props.get(\"children\", [])\n    if not isinstance(children, list):\n        children = [children]\n    return h(\"div\", {\"class\": \"layout\"}, children)\n</code></pre>"},{"location":"guides/authoring-patterns/#context","title":"Context","text":"<p>Provide values with <code>Provider</code> and read with <code>use_context</code>.</p> <pre><code>from wybthon import Provider, h, use_context\nfrom wybthon.context import create_context\n\nTheme = create_context(\"light\")\n\ndef ThemeLabel(_props):\n    return h(\"span\", {}, f\"Theme: {use_context(Theme)}\")\n\ndef Layout(props):\n    children = props.get(\"children\", [])\n    return h(\"div\", {}, h(Provider, {\"context\": Theme, \"value\": \"dark\"}, children))\n</code></pre>"},{"location":"guides/authoring-patterns/#choosing-between-function-and-class","title":"Choosing between function and class","text":"<ul> <li>Use function components for pure UI composition without local reactive state or lifecycle needs.</li> <li>Use class components when you need reactive state, effects, cleanup, or lifecycle hooks.</li> </ul> <p>Both interoperate seamlessly and can be composed together.</p>"},{"location":"guides/authoring-patterns/#patterns-checklist","title":"Patterns checklist","text":"<ul> <li>Read props defensively with defaults.</li> <li>Store signals on <code>self</code> in class components; avoid re-creating them during <code>render</code>.</li> <li>Use <code>effect</code> for side-effects; dispose in <code>on_cleanup</code>.</li> <li>Accept <code>children</code> and pass them through when building layout components.</li> <li>Keep events simple and avoid catching errors unless you can handle them.</li> </ul>"},{"location":"guides/demo-app/","title":"Demo App","text":""},{"location":"guides/demo-app/#demo-app","title":"Demo App","text":"<p>The demo is served from <code>examples/demo/</code>.</p> <ul> <li><code>index.html</code> loads <code>bootstrap.js</code></li> <li><code>bootstrap.js</code> loads Pyodide, mounts the library from <code>src/wybthon/</code>, and copies demo files under <code>/app</code> inside Pyodide FS, then calls <code>app.main.main()</code></li> </ul> <p>Folders under <code>examples/demo/app/</code> mirror routes and components.</p>"},{"location":"guides/demo-app/#routing-and-lazy-loading","title":"Routing and lazy loading","text":"<p>Routes are defined in <code>examples/demo/app/routes.py</code>. The demo showcases lazy loading using <code>load_component()</code> and <code>lazy()</code>:</p> <p>```12:36:examples/demo/app/routes.py from app.errors.page import Page as ErrorsPage from app.fetch.page import FetchPage from app.forms.page import FormsPage from app.page import Page as HomePage from wybthon import Route, lazy, load_component</p> <p>def _AboutLazy():     return (\"app.about.page\", \"Page\")</p> <p>def _TeamLazy():     return (\"app.about.team.page\", \"Page\")</p>"},{"location":"guides/demo-app/#example-of-eager-dynamic-loader-resolves-at-route-creation-time","title":"Example of eager dynamic loader (resolves at route creation time)","text":"<p>Docs = load_component(\"app.docs.page\", \"Page\")</p> <p>def create_routes():     return [         Route(path=\"/\", component=lambda p: HomePage(p)),         Route(             path=\"/about\",             component=lazy(_AboutLazy),             children=[                 Route(path=\"team\", component=lazy(_TeamLazy)),             ],         ),         Route(path=\"/fetch\", component=FetchPage),         Route(path=\"/forms\", component=FormsPage),         Route(path=\"/errors\", component=lambda p: ErrorsPage(p)),         Route(path=\"/docs/*\", component=Docs),     ]</p> <pre><code>We also preload the Team route when the user hovers the link in the nav for a snappier transition:\n\n```1:40:examples/demo/app/components/nav.py\nfrom wybthon import Link, h, preload_component\n\n\ndef Nav(props):\n    base_path = props.get(\"base_path\")\n    # Hint: Preload team route on nav hover to improve perceived navigation time\n    def on_hover_team(_evt):\n        try:\n            preload_component(\"app.about.team.page\", \"Page\")\n        except Exception:\n            pass\n    return h(\n        \"nav\",\n        {\"class\": \"nav\"},\n        h(Link, {\"to\": \"/\", \"base_path\": base_path, \"class\": \"nav-link\", \"class_active\": \"active\"}, \"Home\"),\n        \" | \",\n        h(Link, {\"to\": \"/about\", \"base_path\": base_path, \"class\": \"nav-link\", \"class_active\": \"active\"}, \"About\"),\n        \" (\",\n        h(\n            Link,\n            {\n                \"to\": \"/about/team\",\n                \"base_path\": base_path,\n                \"class\": \"nav-link\",\n                \"class_active\": \"active\",\n                \"on_mouseenter\": on_hover_team,\n            },\n            \"Team\",\n        ),\n        \")\",\n        \" | \",\n        h(Link, {\"to\": \"/fetch\", \"base_path\": base_path, \"class\": \"nav-link\", \"class_active\": \"active\"}, \"Fetch\"),\n        \" | \",\n        h(Link, {\"to\": \"/forms\", \"base_path\": base_path, \"class\": \"nav-link\", \"class_active\": \"active\"}, \"Forms\"),\n        \" | \",\n        h(Link, {\"to\": \"/errors\", \"base_path\": base_path, \"class\": \"nav-link\", \"class_active\": \"active\"}, \"Errors\"),\n        \" | \",\n        h(Link, {\"to\": \"/docs\", \"base_path\": base_path, \"class\": \"nav-link\", \"class_active\": \"active\"}, \"Docs\"),\n        \" (\",\n        h(\n            Link,\n            {\"to\": \"/docs/guide/intro\", \"base_path\": base_path, \"class\": \"nav-link\", \"class_active\": \"active\"},\n            \"guide/intro\",\n        ),\n        \")\",\n        \" | \",\n        h(\n            Link,\n            {\"to\": \"/about\", \"base_path\": base_path, \"replace\": True, \"class\": \"nav-link\", \"class_active\": \"active\"},\n            \"About (replace)\",\n        ),\n    )\n</code></pre>"},{"location":"guides/demo-app/#suspense-for-loading-ui","title":"Suspense for loading UI","text":"<p>The Fetch page uses <code>Suspense</code> to show a fallback while its <code>use_resource</code> is loading and keeps the previous content on reloads:</p> <p>```1:80:examples/demo/app/fetch/page.py from wybthon import Component, Suspense, h, use_resource</p> <p>class FetchPage(Component):     # ... see source for full example ...     def render(self):         return h(             \"div\",             {},             h(\"h3\", {}, \"Async Fetch Demo\"),             h(Suspense, {\"resource\": self.res, \"fallback\": h(\"p\", {}, \"Loading...\"), \"keep_previous\": True}, ...),         ) ```</p> <p>This mirrors how you'd code-split larger apps and warm the import cache based on intent.</p>"},{"location":"guides/deployment/","title":"Deployment","text":""},{"location":"guides/deployment/#deployment","title":"Deployment","text":"<p>Since Wybthon apps run fully client-side, deployment is static hosting.</p> <p>Checklist:</p> <ul> <li>Serve the HTML/JS bundle (Pyodide + your app assets)</li> <li>Set correct <code>Cross-Origin-Opener-Policy</code>/<code>Cross-Origin-Embedder-Policy</code> if using features that require them</li> <li>Use a CDN for Pyodide or host locally</li> </ul> <p>TODO: Provide example configurations for GitHub Pages, Netlify, and Vercel.</p>"},{"location":"guides/dev-server/","title":"Dev Server","text":""},{"location":"guides/dev-server/#dev-server","title":"Dev Server","text":"<p>Run a static server with auto-reload over SSE.</p> <pre><code>pip install .\nwyb dev --dir . --host 127.0.0.1 --port 8000 --watch src examples\n</code></pre> <p>Behavior:</p> <ul> <li>Watches <code>--watch</code> directories for file mtime changes</li> <li>Notifies browser via <code>/__sse</code> events; demo subscribes and reloads the page</li> <li>Binds to the requested port or the next available up to +20</li> </ul> <p>TODO: Document using a custom handler or mounting additional static paths.</p>"},{"location":"guides/performance/","title":"Performance","text":""},{"location":"guides/performance/#performance","title":"Performance","text":"<p>Tips:</p> <ul> <li>Prefer signals at the edges; derive with <code>computed</code> to minimize re-renders</li> <li>Use <code>key</code> on lists to help the diffing algorithm</li> <li>Batch updates with <code>batch()</code></li> </ul> <p>TODO: Add profiling notes and patterns for large lists.</p>"},{"location":"guides/pyodide/","title":"Pyodide","text":""},{"location":"guides/pyodide/#pyodide","title":"Pyodide","text":"<p>Wybthon runs in the browser via Pyodide.</p> <p>Key points:</p> <ul> <li>Use <code>micropip</code> to install packages when needed</li> <li>Import from <code>wybthon</code> after loading the library files into Pyodide FS (the demo does this for you)</li> <li>Interop with JS via <code>js</code> and <code>pyodide.ffi</code></li> </ul> <pre><code>import micropip\nawait micropip.install(\"wybthon\")\nimport wybthon\n</code></pre> <p>TODO: Add guidance on threading/event loops and async APIs in Pyodide.</p>"},{"location":"guides/pyodide/#lazy-imports-and-module-loading-caveats","title":"Lazy imports and module loading caveats","text":"<p>When using <code>lazy()</code> or <code>load_component()</code> in Pyodide:</p> <ul> <li>Ensure the module files exist in the Pyodide filesystem before calling <code>importlib.import_module</code>. The demo's <code>bootstrap.js</code> copies <code>examples/demo/app/**</code> into <code>/app</code>, so imports like <code>\"app.about.page\"</code> resolve.</li> <li>If loading third-party packages, install them with <code>micropip</code> before attempting lazy import.</li> <li>Python imports are synchronous, but fetching files into the FS is asynchronous in JS. Copy or preload files before invoking lazy loaders, or use <code>preload_component()</code> on user intent (e.g., link hover) to warm the import cache.</li> <li>Attribute resolution defaults to <code>Page</code> or <code>default</code> if unspecified; otherwise pass the export name explicitly.</li> </ul> <p>Example:</p> <pre><code>from wybthon import lazy, preload_component\n\ndef AboutLazy():\n    return (\"app.about.page\", \"Page\")\n\nAbout = lazy(AboutLazy)\n\ndef on_hover_about(_evt):\n    preload_component(\"app.about.page\", \"Page\")\n</code></pre>"},{"location":"guides/testing/","title":"Testing","text":""},{"location":"guides/testing/#testing","title":"Testing","text":"<p>Approaches:</p> <ul> <li>Unit test pure modules (e.g., <code>reactivity</code>) in CPython</li> <li>For browser-dependent code, use Pyodide in a headless browser or test via demo pages</li> </ul>"},{"location":"guides/testing/#pyodide-smoke-test-playwright","title":"Pyodide smoke test (Playwright)","text":"<p>We include a minimal Playwright-based smoke test that loads the demo app in a headless Chromium instance with Pyodide, then asserts that key UI elements render.</p> <ul> <li>Location: <code>tests/e2e/test_pyodide_smoke.py</code></li> <li>What it does: starts a simple HTTP server at the repo root, navigates to <code>examples/demo/index.html</code>, and waits for the demo title and <code>Hello, Python!</code> component to appear.</li> </ul> <p>Run locally:</p> <pre><code>pip install -e \".[dev]\"\npython -m playwright install chromium\npytest -q -m e2e tests/e2e/test_pyodide_smoke.py\n</code></pre> <p>Notes:</p> <ul> <li>The demo bootstrap fetches directly from <code>src/wybthon</code> and <code>examples/demo/app</code> so serving the repo root is required.</li> <li>The test uses generous timeouts (up to 120s) since Pyodide initialization can take time in CI.</li> </ul>"},{"location":"guides/testing/#unit-tests","title":"Unit tests","text":"<p>For Python-only logic (e.g., <code>reactivity</code>, <code>forms</code> helpers), write regular <code>pytest</code> tests under <code>tests/</code>.</p>"},{"location":"guides/typing/","title":"Typing","text":""},{"location":"guides/typing/#typing","title":"Typing","text":"<p>The codebase uses type hints and aims for clarity over cleverness.</p> <p>Guidelines:</p> <ul> <li>Prefer precise types on public APIs; avoid <code>Any</code></li> <li>Use <code>Optional[...]</code> where values can be absent</li> <li>In Pyodide/browser interop, tolerate <code>Any</code> at boundaries but narrow types internally</li> </ul> <p>TODO: Add mypy config notes and examples from <code>reactivity.py</code> and <code>router.py</code>.</p>"},{"location":"meta/changelog/","title":"Changelog","text":""},{"location":"meta/changelog/#changelog","title":"Changelog","text":"<p>See the GitHub Releases for full changelog: https://github.com/wybthon/wybthon/releases</p>"},{"location":"meta/contributing/","title":"Contributing","text":""},{"location":"meta/contributing/#contributing","title":"Contributing","text":"<p>See the repository\u2019s <code>CONTRIBUTING.md</code> for full guidelines.</p> <p>Quick start:</p> <pre><code>git clone https://github.com/wybthon/wybthon.git\ncd wybthon\npip install -e .\n</code></pre> <p>TODO: Sync this page with any updates in <code>CONTRIBUTING.md</code> automatically (or link only).</p>"},{"location":"meta/faq/","title":"FAQ","text":""},{"location":"meta/faq/#faq","title":"FAQ","text":"<ul> <li>Q: Is Wybthon production ready?</li> <li> <p>A: Not yet. It\u2019s experimental (pre-alpha).</p> </li> <li> <p>Q: Does it work outside the browser?</p> </li> <li>A: Core reactive primitives do, but rendering and DOM APIs require Pyodide/browser.</li> </ul> <p>TODO: Expand with common Pyodide and packaging questions.</p>"},{"location":"meta/roadmap/","title":"Roadmap","text":""},{"location":"meta/roadmap/#roadmap","title":"Roadmap","text":"<p>Wybthon v0.3.0 is published. Below is a prioritized implementation plan to evolve Wybthon into a practical CSR/SPA framework running client-side Python via Pyodide. This plan includes a numbered list of top tasks and versioned milestones up to v1.0.0.</p>"},{"location":"meta/roadmap/#prioritized-implementation-tasks-top-to-bottom","title":"Prioritized implementation tasks (top to bottom)","text":"<ol> <li>Stabilize reactivity scheduling and effect/resource lifecycle</li> <li>Make microtask scheduling deterministic in Pyodide; ensure <code>_schedule_flush()</code> is robust and test-covered.</li> <li>Guarantee <code>Computation.dispose()</code> consistently unsubscribes and cancels pending runs.</li> <li>Resource cancellation: ensure <code>Resource.cancel()</code> reliably aborts JS fetches and Python tasks; add race tests.</li> <li>Document component authoring patterns (function vs class)</li> <li>Authoritative guidance on using <code>signal</code>, <code>computed</code>, <code>effect</code> inside class and function components.</li> <li>Patterns for state ownership, passing <code>children</code>, cleanup via <code>on_cleanup</code> and effect disposal.</li> <li>Router: nested routes, wildcards, and route info</li> <li>Implement nested route resolution using <code>Route.children</code> with params/queries threaded through.</li> <li>Wildcard routes, 404 handling, and base path support.</li> <li>Add <code>Link</code> active state styling and <code>navigate</code> options.</li> <li>Code splitting and lazy routes (Pyodide-safe)</li> <li>Provide <code>lazy()</code> utility for deferred component loading via <code>importlib</code>/<code>micropip</code> in Pyodide.</li> <li>Example: split demo routes; preloading hooks.</li> <li>Error boundaries ergonomics and loading fallbacks</li> <li>Improve <code>ErrorBoundary</code> reset behavior; document guarantees and limitations.</li> <li>Introduce <code>Suspense</code>-like helper for <code>use_resource</code> loading fallbacks.</li> <li>DOM/VDOM diffing correctness and performance pass</li> <li>Strengthen keyed diffing for reorders; add benchmarks for list ops and text updates.</li> <li>Ensure <code>_apply_props</code> covers edge-case removals for <code>style</code>, <code>dataset</code>, <code>value</code>, <code>checked</code>.</li> <li>Events: ergonomics and normalization</li> <li>Finalize <code>DomEvent</code> docs (<code>prevent_default</code>, <code>stop_propagation</code>, <code>current_target</code>).</li> <li>Normalize <code>on_foo</code>/<code>onFoo</code> mapping with tests; ensure delegation cleanup on unmount.</li> <li>Forms: bindings and validation completeness</li> <li>Ship and document <code>bind_checkbox</code>, <code>bind_select</code>, <code>on_submit</code> end-to-end; add form-level validation helpers.</li> <li>Accessibility guidance and examples.</li> <li>Dev server quality-of-life</li> <li>Auto-open, configurable static roots, logging, and error overlay for Python exceptions in Pyodide.</li> <li>Cache-busting and content hashing for example demos.</li> <li>Testing matrix and CI</li> <li>Unit tests for router resolution (params, wildcards, nested), VDOM diffing, events delegation, and resources.</li> <li>Pyodide-in-browser smoke tests via Playwright or Pyodide headless.</li> <li>Public API hardening and typing</li> <li>Tighten <code>__all__</code> surface, finalize names, improve type hints, and add <code>typing</code> docs.</li> <li>CLI scaffolding (research \u2192 MVP)</li> <li><code>wyb new</code> to scaffold a Pyodide app with router, components, and dev server config.</li> <li>Templates for basic SPA and demo.</li> </ol> <p>These tasks map directly into the versioned milestones below.</p>"},{"location":"meta/roadmap/#versioned-milestones","title":"Versioned milestones","text":"<ul> <li>v0.1.1 (Stability and docs)</li> <li>(1) Reactivity flush determinism; resource cancellation tests; minor bug fixes in <code>_apply_props</code>.</li> <li>(2) Initial authoring patterns guide with examples (function + class components).</li> <li>(7) Document events and <code>DomEvent</code> shape; add basic event tests.</li> <li> <p>(10) CI for unit tests on Python-side; begin Pyodide test harness setup.</p> </li> <li> <p>v0.2.0 (Routing foundations)</p> </li> <li>(3) Nested routing with <code>Route.children</code>, wildcard routes, 404 handling, base path.</li> <li>(3) <code>Link</code> active class and <code>navigate(replace=True)</code> examples.</li> <li>(10) Router unit tests covering params, nested, wildcard.</li> <li> <p>Docs: concepts + examples for router, including migration notes.</p> </li> <li> <p>v0.3.0 (Lazy loading and code splitting)</p> </li> <li>(4) <code>lazy()</code>/<code>load_component()</code> utilities compatible with Pyodide; preload APIs.</li> <li>(4) Demo: split <code>examples/demo</code> routes; document caveats with Pyodide module loading.</li> <li> <p>(5) Optional <code>Suspense</code>-like helper for resource loading fallbacks.</p> </li> <li> <p>v0.4.0 (Error handling and UX)</p> </li> <li>(5) ErrorBoundary reset API clarified; fallback ergonomics improved; docs and examples.</li> <li>(7) Event delegation cleanup guarantees on unmount with tests.</li> <li> <p>(8) Form submit patterns with validation aggregates and accessibility tips.</p> </li> <li> <p>v0.5.0 (VDOM performance and correctness)</p> </li> <li>(6) Keyed children reorder correctness and micro-benchmarks.</li> <li>(6) Prop application edge cases (style/dataset/value/checked) covered with tests.</li> <li> <p>(10) Add VDOM diffing tests for text node fast-path and reorders.</p> </li> <li> <p>v0.6.0 (Dev server DX)</p> </li> <li>(9) Auto-open, static mount configuration, error overlay in browser for Python exceptions.</li> <li>(9) Cache busting for demo assets, configurable host/port messages.</li> <li> <p>Docs: dev server advanced usage and troubleshooting.</p> </li> <li> <p>v0.7.0 (API hardening and typing)</p> </li> <li>(11) Finalize public API surface via <code>__all__</code> and docs; strengthen type hints.</li> <li>(2) Complete component authoring patterns (state, children composition, cleanup) with larger examples.</li> <li> <p>(10) Expand CI: mypy, formatting, and coverage gates.</p> </li> <li> <p>v0.8.0 (Ecosystem and forms)</p> </li> <li>(8) Form-level validation helpers, schema integration option, more bindings examples.</li> <li>(7) Event docs: comprehensive list and cross-browser notes for Pyodide.</li> <li> <p>(10) Add forms and events test suites.</p> </li> <li> <p>v0.9.0 (Code splitting + router integration)</p> </li> <li>(4) Route-level code splitting patterns with preloading and error/timeout fallbacks.</li> <li>(3) Router devtools-friendly logging and navigation hooks.</li> <li> <p>Docs: performance guide and code splitting best practices under Pyodide constraints.</p> </li> <li> <p>v1.0.0 (Stable SPA release)</p> </li> <li>API freeze across <code>reactivity</code>, <code>vdom</code>, <code>router</code>, <code>forms</code>, <code>context</code>, <code>events</code>.</li> <li>Documentation complete: getting started, concepts, API reference, guides (typing, testing, deployment, performance), and a full demo app.</li> <li>Test suite: router/vdom/events/resources/forms; basic browser automation for Pyodide; CI passing.</li> <li>(12) CLI scaffolding MVP (<code>wyb new</code>) shipped, marked experimental but supported.</li> <li>Post-1.0 roadmap prepared (SSR story research, ecosystem integrations).</li> </ul>"},{"location":"meta/roadmap/#notes-and-longer-term-research","title":"Notes and longer-term research","text":"<ul> <li>SSR story (research): feasibility of server-rendered HTML with client handoff in Pyodide contexts.</li> <li>CLI scaffolding expansions: templates, generators, and plug-ins.</li> </ul> <p>This roadmap should be reflected as GitHub milestones and issues. Each release should include a changelog entry in <code>docs/meta/changelog.md</code> and a PyPI release with pinned version.</p>"},{"location":"meta/roadmap/#semantic-versioning-semver-policy","title":"Semantic Versioning (SemVer) policy","text":"<ul> <li>Pre-1.0.0 (0.x.y)</li> <li>Minor releases (0.MINOR) may include breaking changes.</li> <li>Patch releases (0.MINOR.PATCH) are limited to backward-compatible fixes.</li> <li>All breaking changes must be documented in the changelog.</li> <li>From 1.0.0 onwards</li> <li>PATCH: backward-compatible bug fixes only.</li> <li>MINOR: backward-compatible features and additions only.</li> <li>MAJOR: any breaking change (API removals/renames, behavior changes, type/signature changes).</li> <li>APIs may be explicitly marked \u201cexperimental\u201d to exempt them from stability guarantees until stabilization.</li> <li>Alignment with this roadmap</li> <li>Pre-1.0 allows API evolution and cleanup.</li> <li>1.0.0 introduces an API freeze; no breaking changes in minor or patch releases.</li> </ul>"},{"location":"meta/roadmap/#release-branching-strategy-major-versions","title":"Release branching strategy (major versions)","text":"<ul> <li>Maintenance branch</li> <li>After <code>v1.0.0</code>, create a long-lived <code>1.x</code> (or <code>release/1.x</code>) branch.</li> <li>Ship all <code>v1.y.z</code> releases from this branch (e.g., <code>v1.2.0</code>, <code>v1.3.0</code>).</li> <li>Next-major development</li> <li>Option A: set <code>main</code> to v2 development after cutting <code>1.x</code>.</li> <li>Option B: keep <code>main</code> on v1.x and develop v2 on a long-lived <code>next</code>/<code>v2</code> branch; merge into <code>main</code> when releasing <code>v2.0.0</code>.</li> <li>Parallel work</li> <li>Target v1.x PRs to <code>1.x</code>; target v2 PRs to <code>main</code> (or <code>next</code>).</li> <li>Forward-merge or cherry-pick from <code>1.x</code> \u2192 <code>main</code> regularly to carry fixes/improvements forward.</li> <li>Versioning and tags</li> <li>Tag v1 releases on <code>1.x</code> (e.g., <code>v1.3.0</code>).</li> <li>Tag v2 pre-releases/releases on <code>main</code>/<code>next</code> (e.g., <code>v2.0.0rc1</code>, <code>v2.0.0</code>).</li> <li>Breaking-change notation</li> <li>Use Conventional Commits with <code>!</code> or a <code>BREAKING CHANGE:</code> footer and include migration notes.</li> <li>Patch policy</li> <li>Keep one maintenance line per major (e.g., <code>1.x</code>) and apply patches only to the latest minor of that line (e.g., <code>1.5.x</code>); older minors are not patched.</li> </ul>"},{"location":"meta/troubleshooting/","title":"Troubleshooting","text":""},{"location":"meta/troubleshooting/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues:</p> <ul> <li>Pyodide fails to load: check network and CDN URL; try a local copy</li> <li>SSE reloads not firing: ensure the dev server is running and <code>/__sse</code> is reachable</li> <li>Events not triggering: confirm handler prop names (e.g., <code>on_click</code>)</li> </ul> <p>TODO: Add error messages and remedies from real-world usage.</p>"}]}